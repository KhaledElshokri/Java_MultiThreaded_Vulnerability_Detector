import java.util.ArrayList;
import java.util.List;

public class MainThread {

	public static void main(String[] args) {
		
		MasterThread wMyThread = new MasterThread();

		//Starting the main itteration on the text file
		for(int i = 0; i < wMyThread.mNumberOfLines; i++) {
			
			List<Thread> wCurrentThreads = new ArrayList<>();
			
			int j = 0;
			
			for(; j < wMyThread.mWorkerThreads; j++) {

				//In case there is more	 threads to be launched than actual lines left to go through
				if( i + j < wMyThread.mNumberOfLines) {
					
					Worker MyWorker = new Worker(wMyThread, wMyThread.mTextFileArray[i+j]);
					wCurrentThreads.add(MyWorker);//adding the new worker thread to the array to later check if they are done or not
					MyWorker.start();
				}
			
			}
			
	        // Wait for all threads to finish
	        for (Thread thread : wCurrentThreads) {
	            try {
	                thread.join();
	            } catch (InterruptedException e) {
	                e.printStackTrace();
	            }
	        }

			System.out.println("Current Vurnability Count is now " + wMyThread.mVulnCounter);// output for the current vulnability count
			
			//updating Approximate average and checking to add threads
			wMyThread.updateApproximateAverage();
			

			//Account for the fact that a lot of threads are launched at the same time
			i += j;	 //to avoid assigning the same log to multiple threads.
		if( i+j >= wMyThread.mNumberOfLines ) {
			
			i -= 4;
			System.out.println("Number of lines scanned: " + i); // output of the current line count
			
		}
		else {
			
			 System.out.println("Number of lines scanned: " + i); // output of the current line count
		}
	   
		System.out.println("Thread Count: " + wMyThread.mWorkerThreads);
		}

	}

}
